{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      },
      "DependsOn": []
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-login"
      },
      "DependsOn": []
    },
    "CommandCreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandCreateUser"
      },
      "DependsOn": []
    },
    "CommandUpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandUpdateUser"
      },
      "DependsOn": []
    },
    "CommandDeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandDeleteUser"
      },
      "DependsOn": []
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-createUser"
      },
      "DependsOn": []
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-updateUser"
      },
      "DependsOn": []
    },
    "DeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-deleteUser"
      },
      "DependsOn": []
    },
    "ReadUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-readUser"
      },
      "DependsOn": []
    },
    "PushCreateUserToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushCreateUserToSQS"
      },
      "DependsOn": []
    },
    "PushUpdateUserToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushUpdateUserToSQS"
      },
      "DependsOn": []
    },
    "PushDeleteUserToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushDeleteUserToSQS"
      },
      "DependsOn": []
    },
    "CommandCreateRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandCreateRole"
      },
      "DependsOn": []
    },
    "CommandUpdateRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandUpdateRole"
      },
      "DependsOn": []
    },
    "CommandDeleteRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandDeleteRole"
      },
      "DependsOn": []
    },
    "CreateRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-createRole"
      },
      "DependsOn": []
    },
    "UpdateRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-updateRole"
      },
      "DependsOn": []
    },
    "DeleteRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-deleteRole"
      },
      "DependsOn": []
    },
    "ReadRoleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-readRole"
      },
      "DependsOn": []
    },
    "GetAllRolesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-getAllRoles"
      },
      "DependsOn": []
    },
    "PushCreateRoleToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushCreateRoleToSQS"
      },
      "DependsOn": []
    },
    "PushUpdateRoleToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushUpdateRoleToSQS"
      },
      "DependsOn": []
    },
    "PushDeleteRoleToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushDeleteRoleToSQS"
      },
      "DependsOn": []
    },
    "CommandCreateAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandCreateAuth"
      },
      "DependsOn": []
    },
    "CommandUpdateAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandUpdateAuth"
      },
      "DependsOn": []
    },
    "CommandDeleteAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandDeleteAuth"
      },
      "DependsOn": []
    },
    "CreateAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-createAuth"
      },
      "DependsOn": []
    },
    "UpdateAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-updateAuth"
      },
      "DependsOn": []
    },
    "DeleteAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-deleteAuth"
      },
      "DependsOn": []
    },
    "ReadAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-readAuth"
      },
      "DependsOn": []
    },
    "GetAllAuthsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-getAllAuths"
      },
      "DependsOn": []
    },
    "PushCreateAuthToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushCreateAuthToSQS"
      },
      "DependsOn": []
    },
    "PushUpdateAuthToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushUpdateAuthToSQS"
      },
      "DependsOn": []
    },
    "PushDeleteAuthToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushDeleteAuthToSQS"
      },
      "DependsOn": []
    },
    "CommandCreateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandCreateGroup"
      },
      "DependsOn": []
    },
    "CommandUpdateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandUpdateGroup"
      },
      "DependsOn": []
    },
    "CommandDeleteGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-commandDeleteGroup"
      },
      "DependsOn": []
    },
    "CreateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-createGroup"
      },
      "DependsOn": []
    },
    "UpdateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-updateGroup"
      },
      "DependsOn": []
    },
    "DeleteGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-deleteGroup"
      },
      "DependsOn": []
    },
    "ReadGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-readGroup"
      },
      "DependsOn": []
    },
    "GetAllGroupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-getAllGroups"
      },
      "DependsOn": []
    },
    "PushCreateGroupToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushCreateGroupToSQS"
      },
      "DependsOn": []
    },
    "PushUpdateGroupToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushUpdateGroupToSQS"
      },
      "DependsOn": []
    },
    "PushDeleteGroupToSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-pushDeleteGroupToSQS"
      },
      "DependsOn": []
    },
    "RecoveryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-recovery"
      },
      "DependsOn": []
    },
    "MediatorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-user-management-dev-mediator"
      },
      "DependsOn": []
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "serverless-user-management",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-user-management-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-user-management-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "dynamodb:*",
                    "sqs:*",
                    "lambda:*",
                    "cloudwatch:*",
                    "apigateway:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:eu-central-1:582373673306:table/eventStore/stream/2019-07-10T08:02:22.059"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:createUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:updateUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:deleteUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeCreateUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeUpdateUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeDeleteUserQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:createRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:updateRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:deleteRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeCreateRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeUpdateRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeDeleteRoleQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:createAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:updateAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:deleteAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeCreateAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeUpdateAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeDeleteAuthQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:createGroupQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:updateGroupQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:deleteGroupQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeCreateGroupQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeUpdateGroupQueue"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:582373673306:executeDeleteGroupQueue"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-user-management",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-login",
        "Handler": "handler.login",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "LoginLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandCreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandCreateUser",
        "Handler": "handler.commandCreateUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandCreateUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandUpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandUpdateUser",
        "Handler": "handler.commandUpdateUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandUpdateUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandDeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandDeleteUser",
        "Handler": "handler.commandDeleteUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandDeleteUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-createUser",
        "Handler": "handler.createUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "CreateUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-updateUser",
        "Handler": "handler.updateUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "UpdateUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-deleteUser",
        "Handler": "handler.deleteUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "DeleteUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ReadUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-readUser",
        "Handler": "handler.readUser",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "ReadUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushCreateUserToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushCreateUserToSQS",
        "Handler": "handler.pushCreateUserToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushCreateUserToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushUpdateUserToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushUpdateUserToSQS",
        "Handler": "handler.pushUpdateUserToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushUpdateUserToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushDeleteUserToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushDeleteUserToSQS",
        "Handler": "handler.pushDeleteUserToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushDeleteUserToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandCreateRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandCreateRole",
        "Handler": "handler.commandCreateRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandCreateRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandUpdateRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandUpdateRole",
        "Handler": "handler.commandUpdateRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandUpdateRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandDeleteRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandDeleteRole",
        "Handler": "handler.commandDeleteRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandDeleteRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-createRole",
        "Handler": "handler.createRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "CreateRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-updateRole",
        "Handler": "handler.updateRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "UpdateRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeleteRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-deleteRole",
        "Handler": "handler.deleteRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "DeleteRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ReadRoleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-readRole",
        "Handler": "handler.readRole",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "ReadRoleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetAllRolesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-getAllRoles",
        "Handler": "handler.getAllRoles",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "GetAllRolesLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushCreateRoleToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushCreateRoleToSQS",
        "Handler": "handler.pushCreateRoleToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushCreateRoleToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushUpdateRoleToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushUpdateRoleToSQS",
        "Handler": "handler.pushUpdateRoleToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushUpdateRoleToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushDeleteRoleToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushDeleteRoleToSQS",
        "Handler": "handler.pushDeleteRoleToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushDeleteRoleToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandCreateAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandCreateAuth",
        "Handler": "handler.commandCreateAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandCreateAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandUpdateAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandUpdateAuth",
        "Handler": "handler.commandUpdateAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandUpdateAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandDeleteAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandDeleteAuth",
        "Handler": "handler.commandDeleteAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandDeleteAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-createAuth",
        "Handler": "handler.createAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "CreateAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-updateAuth",
        "Handler": "handler.updateAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "UpdateAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeleteAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-deleteAuth",
        "Handler": "handler.deleteAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "DeleteAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ReadAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-readAuth",
        "Handler": "handler.readAuth",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "ReadAuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetAllAuthsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-getAllAuths",
        "Handler": "handler.getAllAuths",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "GetAllAuthsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushCreateAuthToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushCreateAuthToSQS",
        "Handler": "handler.pushCreateAuthToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushCreateAuthToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushUpdateAuthToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushUpdateAuthToSQS",
        "Handler": "handler.pushUpdateAuthToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushUpdateAuthToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushDeleteAuthToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushDeleteAuthToSQS",
        "Handler": "handler.pushDeleteAuthToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushDeleteAuthToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandCreateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandCreateGroup",
        "Handler": "handler.commandCreateGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandCreateGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandUpdateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandUpdateGroup",
        "Handler": "handler.commandUpdateGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandUpdateGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CommandDeleteGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-commandDeleteGroup",
        "Handler": "handler.commandDeleteGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "CommandDeleteGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-createGroup",
        "Handler": "handler.createGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "CreateGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-updateGroup",
        "Handler": "handler.updateGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "UpdateGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeleteGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-deleteGroup",
        "Handler": "handler.deleteGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "DeleteGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ReadGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-readGroup",
        "Handler": "handler.readGroup",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "ReadGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetAllGroupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-getAllGroups",
        "Handler": "handler.getAllGroups",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "GetAllGroupsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushCreateGroupToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushCreateGroupToSQS",
        "Handler": "handler.pushCreateGroupToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushCreateGroupToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushUpdateGroupToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushUpdateGroupToSQS",
        "Handler": "handler.pushUpdateGroupToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushUpdateGroupToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushDeleteGroupToSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-pushDeleteGroupToSQS",
        "Handler": "handler.pushDeleteGroupToSQS",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "PushDeleteGroupToSQSLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RecoveryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-recovery",
        "Handler": "handler.recovery",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10
      },
      "DependsOn": [
        "RecoveryLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "MediatorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z/serverless-user-management.zip"
        },
        "FunctionName": "serverless-user-management-dev-mediator",
        "Handler": "handler.mediator",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6
      },
      "DependsOn": [
        "MediatorLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-serverless-user-management",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceReaduser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "readUser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceReadrole": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "readRole",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceGetallroles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getAllRoles",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceReadauth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "readAuth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceGetallauths": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getAllAuths",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceReadgroup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "readGroup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceGetallgroups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getAllGroups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayResourceMediatorrecovery": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "mediatorrecovery",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceLogin"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReaduserOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceReaduser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateusertosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateusertosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteusertosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadroleOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadrole"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallrolesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallroles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateroletosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateroletosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteroletosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadauthOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadauth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallauthsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallauths"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateauthtosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateauthtosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteauthtosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadgroupOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadgroup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallgroupsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallgroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreategrouptosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreategrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdategrouptosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdategrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeletegrouptosqsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeletegrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodMediatorrecoveryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMediatorrecovery"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      },
      "DependsOn": []
    },
    "ApiGatewayMethodLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceLogin"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReaduserGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceReaduser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"userId\": \"$input.params(\"userId\")\" }",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateusertosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushCreateUserToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateusertosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushUpdateUserToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteusertosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteusertosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushDeleteUserToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadroleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadrole"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadRoleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"roleId\": \"$input.params(\"roleId\")\" }",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallrolesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallroles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllRolesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateroletosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushCreateRoleToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateroletosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushUpdateRoleToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteroletosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteroletosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushDeleteRoleToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadauthGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadauth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadAuthLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"authId\": \"$input.params(\"authId\")\" }",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallauthsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallauths"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllAuthsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreateauthtosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreateauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushCreateAuthToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdateauthtosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdateauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushUpdateAuthToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeleteauthtosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeleteauthtosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushDeleteAuthToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodReadgroupGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceReadgroup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReadGroupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"groupId\": \"$input.params(\"groupId\")\" }",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodGetallgroupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallgroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllGroupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayMethodPushcreategrouptosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushcreategrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushCreateGroupToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushupdategrouptosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushupdategrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushUpdateGroupToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodPushdeletegrouptosqsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourcePushdeletegrouptosqs"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PushDeleteGroupToSQSLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodMediatorrecoveryPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMediatorrecovery"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RecoveryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": []
    },
    "ApiGatewayDeployment1563542810709": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodLoginOptions",
        "ApiGatewayMethodReaduserOptions",
        "ApiGatewayMethodPushcreateusertosqsOptions",
        "ApiGatewayMethodPushupdateusertosqsOptions",
        "ApiGatewayMethodPushdeleteusertosqsOptions",
        "ApiGatewayMethodReadroleOptions",
        "ApiGatewayMethodGetallrolesOptions",
        "ApiGatewayMethodPushcreateroletosqsOptions",
        "ApiGatewayMethodPushupdateroletosqsOptions",
        "ApiGatewayMethodPushdeleteroletosqsOptions",
        "ApiGatewayMethodReadauthOptions",
        "ApiGatewayMethodGetallauthsOptions",
        "ApiGatewayMethodPushcreateauthtosqsOptions",
        "ApiGatewayMethodPushupdateauthtosqsOptions",
        "ApiGatewayMethodPushdeleteauthtosqsOptions",
        "ApiGatewayMethodReadgroupOptions",
        "ApiGatewayMethodGetallgroupsOptions",
        "ApiGatewayMethodPushcreategrouptosqsOptions",
        "ApiGatewayMethodPushupdategrouptosqsOptions",
        "ApiGatewayMethodPushdeletegrouptosqsOptions",
        "ApiGatewayMethodMediatorrecoveryOptions",
        "ApiGatewayMethodLoginPost",
        "ApiGatewayMethodReaduserGet",
        "ApiGatewayMethodPushcreateusertosqsPost",
        "ApiGatewayMethodPushupdateusertosqsPost",
        "ApiGatewayMethodPushdeleteusertosqsPost",
        "ApiGatewayMethodReadroleGet",
        "ApiGatewayMethodGetallrolesGet",
        "ApiGatewayMethodPushcreateroletosqsPost",
        "ApiGatewayMethodPushupdateroletosqsPost",
        "ApiGatewayMethodPushdeleteroletosqsPost",
        "ApiGatewayMethodReadauthGet",
        "ApiGatewayMethodGetallauthsGet",
        "ApiGatewayMethodPushcreateauthtosqsPost",
        "ApiGatewayMethodPushupdateauthtosqsPost",
        "ApiGatewayMethodPushdeleteauthtosqsPost",
        "ApiGatewayMethodReadgroupGet",
        "ApiGatewayMethodGetallgroupsGet",
        "ApiGatewayMethodPushcreategrouptosqsPost",
        "ApiGatewayMethodPushupdategrouptosqsPost",
        "ApiGatewayMethodPushdeletegrouptosqsPost",
        "ApiGatewayMethodMediatorrecoveryPost"
      ]
    },
    "ReadUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "ReadRoleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadRoleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "GetAllRolesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllRolesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "ReadAuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "GetAllAuthsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllAuthsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "ReadGroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadGroupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "GetAllGroupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllGroupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "RecoveryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RecoveryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "MediatorEventSourceMappingDynamodbEventStore": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:dynamodb:eu-central-1:582373673306:table/eventStore/stream/2019-07-10T08:02:22.059",
        "FunctionName": {
          "Fn::GetAtt": [
            "MediatorLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON",
        "Enabled": "True"
      }
    },
    "CommandCreateUserEventSourceMappingSQSCreateUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:createUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandCreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandUpdateUserEventSourceMappingSQSUpdateUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:updateUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandUpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandDeleteUserEventSourceMappingSQSDeleteUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:deleteUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandDeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CreateUserEventSourceMappingSQSExecuteCreateUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeCreateUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "UpdateUserEventSourceMappingSQSExecuteUpdateUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeUpdateUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "DeleteUserEventSourceMappingSQSExecuteDeleteUserQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeDeleteUserQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandCreateRoleEventSourceMappingSQSCreateRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:createRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandCreateRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandUpdateRoleEventSourceMappingSQSUpdateRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:updateRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandUpdateRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandDeleteRoleEventSourceMappingSQSDeleteRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:deleteRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandDeleteRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CreateRoleEventSourceMappingSQSExecuteCreateRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeCreateRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "UpdateRoleEventSourceMappingSQSExecuteUpdateRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeUpdateRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "DeleteRoleEventSourceMappingSQSExecuteDeleteRoleQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeDeleteRoleQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteRoleLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandCreateAuthEventSourceMappingSQSCreateAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:createAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandCreateAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandUpdateAuthEventSourceMappingSQSUpdateAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:updateAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandUpdateAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandDeleteAuthEventSourceMappingSQSDeleteAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:deleteAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandDeleteAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CreateAuthEventSourceMappingSQSExecuteCreateAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeCreateAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "UpdateAuthEventSourceMappingSQSExecuteUpdateAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeUpdateAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "DeleteAuthEventSourceMappingSQSExecuteDeleteAuthQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeDeleteAuthQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteAuthLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandCreateGroupEventSourceMappingSQSCreateGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:createGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandCreateGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandUpdateGroupEventSourceMappingSQSUpdateGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:updateGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandUpdateGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CommandDeleteGroupEventSourceMappingSQSDeleteGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:deleteGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CommandDeleteGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "CreateGroupEventSourceMappingSQSExecuteCreateGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeCreateGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "UpdateGroupEventSourceMappingSQSExecuteUpdateGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeUpdateGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "DeleteGroupEventSourceMappingSQSExecuteDeleteGroupQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:582373673306:executeDeleteGroupQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteGroupLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "UsersDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "user"
      },
      "DependsOn": []
    },
    "RolesDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "roleId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "roleId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "role"
      },
      "DependsOn": []
    },
    "AuthorizationsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "authId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "authId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "auth"
      },
      "DependsOn": []
    },
    "GroupsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "groupId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "groupId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "group"
      },
      "DependsOn": []
    },
    "EventStoreDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "eventId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "eventId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        },
        "TableName": "eventStore"
      },
      "DependsOn": []
    },
    "APINestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ApiGatewayRestApiParameter": {
            "Ref": "ApiGatewayRestApi"
          },
          "ApiGatewayRestApiRootResourceIdParameter": {
            "Fn::GetAtt": [
              "ApiGatewayRestApi",
              "RootResourceId"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.eu-central-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z",
              "cloudformation-template-API-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "ApiGatewayRestApi"
      ]
    },
    "PermissionsNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ApiGatewayRestApiParameter": {
            "Ref": "ApiGatewayRestApi"
          },
          "LoginLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "LoginLambdaFunction",
              "Arn"
            ]
          },
          "PushCreateUserToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushCreateUserToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushUpdateUserToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushUpdateUserToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushDeleteUserToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushDeleteUserToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushCreateRoleToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushCreateRoleToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushUpdateRoleToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushUpdateRoleToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushDeleteRoleToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushDeleteRoleToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushCreateAuthToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushCreateAuthToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushUpdateAuthToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushUpdateAuthToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushDeleteAuthToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushDeleteAuthToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushCreateGroupToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushCreateGroupToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushUpdateGroupToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushUpdateGroupToSQSLambdaFunction",
              "Arn"
            ]
          },
          "PushDeleteGroupToSQSLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "PushDeleteGroupToSQSLambdaFunction",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.eu-central-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z",
              "cloudformation-template-Permissions-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "ApiGatewayRestApi",
        "LoginLambdaFunction",
        "PushCreateUserToSQSLambdaFunction",
        "PushUpdateUserToSQSLambdaFunction",
        "PushDeleteUserToSQSLambdaFunction",
        "PushCreateRoleToSQSLambdaFunction",
        "PushUpdateRoleToSQSLambdaFunction",
        "PushDeleteRoleToSQSLambdaFunction",
        "PushCreateAuthToSQSLambdaFunction",
        "PushUpdateAuthToSQSLambdaFunction",
        "PushDeleteAuthToSQSLambdaFunction",
        "PushCreateGroupToSQSLambdaFunction",
        "PushUpdateGroupToSQSLambdaFunction",
        "PushDeleteGroupToSQSLambdaFunction"
      ]
    },
    "VersionsNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "LoginLambdaFunctionParameter": {
            "Ref": "LoginLambdaFunction"
          },
          "CommandCreateUserLambdaFunctionParameter": {
            "Ref": "CommandCreateUserLambdaFunction"
          },
          "CommandUpdateUserLambdaFunctionParameter": {
            "Ref": "CommandUpdateUserLambdaFunction"
          },
          "CommandDeleteUserLambdaFunctionParameter": {
            "Ref": "CommandDeleteUserLambdaFunction"
          },
          "CreateUserLambdaFunctionParameter": {
            "Ref": "CreateUserLambdaFunction"
          },
          "UpdateUserLambdaFunctionParameter": {
            "Ref": "UpdateUserLambdaFunction"
          },
          "DeleteUserLambdaFunctionParameter": {
            "Ref": "DeleteUserLambdaFunction"
          },
          "ReadUserLambdaFunctionParameter": {
            "Ref": "ReadUserLambdaFunction"
          },
          "PushCreateUserToSQSLambdaFunctionParameter": {
            "Ref": "PushCreateUserToSQSLambdaFunction"
          },
          "PushUpdateUserToSQSLambdaFunctionParameter": {
            "Ref": "PushUpdateUserToSQSLambdaFunction"
          },
          "PushDeleteUserToSQSLambdaFunctionParameter": {
            "Ref": "PushDeleteUserToSQSLambdaFunction"
          },
          "CommandCreateRoleLambdaFunctionParameter": {
            "Ref": "CommandCreateRoleLambdaFunction"
          },
          "CommandUpdateRoleLambdaFunctionParameter": {
            "Ref": "CommandUpdateRoleLambdaFunction"
          },
          "CommandDeleteRoleLambdaFunctionParameter": {
            "Ref": "CommandDeleteRoleLambdaFunction"
          },
          "CreateRoleLambdaFunctionParameter": {
            "Ref": "CreateRoleLambdaFunction"
          },
          "UpdateRoleLambdaFunctionParameter": {
            "Ref": "UpdateRoleLambdaFunction"
          },
          "DeleteRoleLambdaFunctionParameter": {
            "Ref": "DeleteRoleLambdaFunction"
          },
          "ReadRoleLambdaFunctionParameter": {
            "Ref": "ReadRoleLambdaFunction"
          },
          "GetAllRolesLambdaFunctionParameter": {
            "Ref": "GetAllRolesLambdaFunction"
          },
          "PushCreateRoleToSQSLambdaFunctionParameter": {
            "Ref": "PushCreateRoleToSQSLambdaFunction"
          },
          "PushUpdateRoleToSQSLambdaFunctionParameter": {
            "Ref": "PushUpdateRoleToSQSLambdaFunction"
          },
          "PushDeleteRoleToSQSLambdaFunctionParameter": {
            "Ref": "PushDeleteRoleToSQSLambdaFunction"
          },
          "CommandCreateAuthLambdaFunctionParameter": {
            "Ref": "CommandCreateAuthLambdaFunction"
          },
          "CommandUpdateAuthLambdaFunctionParameter": {
            "Ref": "CommandUpdateAuthLambdaFunction"
          },
          "CommandDeleteAuthLambdaFunctionParameter": {
            "Ref": "CommandDeleteAuthLambdaFunction"
          },
          "CreateAuthLambdaFunctionParameter": {
            "Ref": "CreateAuthLambdaFunction"
          },
          "UpdateAuthLambdaFunctionParameter": {
            "Ref": "UpdateAuthLambdaFunction"
          },
          "DeleteAuthLambdaFunctionParameter": {
            "Ref": "DeleteAuthLambdaFunction"
          },
          "ReadAuthLambdaFunctionParameter": {
            "Ref": "ReadAuthLambdaFunction"
          },
          "GetAllAuthsLambdaFunctionParameter": {
            "Ref": "GetAllAuthsLambdaFunction"
          },
          "PushCreateAuthToSQSLambdaFunctionParameter": {
            "Ref": "PushCreateAuthToSQSLambdaFunction"
          },
          "PushUpdateAuthToSQSLambdaFunctionParameter": {
            "Ref": "PushUpdateAuthToSQSLambdaFunction"
          },
          "PushDeleteAuthToSQSLambdaFunctionParameter": {
            "Ref": "PushDeleteAuthToSQSLambdaFunction"
          },
          "CommandCreateGroupLambdaFunctionParameter": {
            "Ref": "CommandCreateGroupLambdaFunction"
          },
          "CommandUpdateGroupLambdaFunctionParameter": {
            "Ref": "CommandUpdateGroupLambdaFunction"
          },
          "CommandDeleteGroupLambdaFunctionParameter": {
            "Ref": "CommandDeleteGroupLambdaFunction"
          },
          "CreateGroupLambdaFunctionParameter": {
            "Ref": "CreateGroupLambdaFunction"
          },
          "UpdateGroupLambdaFunctionParameter": {
            "Ref": "UpdateGroupLambdaFunction"
          },
          "DeleteGroupLambdaFunctionParameter": {
            "Ref": "DeleteGroupLambdaFunction"
          },
          "ReadGroupLambdaFunctionParameter": {
            "Ref": "ReadGroupLambdaFunction"
          },
          "GetAllGroupsLambdaFunctionParameter": {
            "Ref": "GetAllGroupsLambdaFunction"
          },
          "PushCreateGroupToSQSLambdaFunctionParameter": {
            "Ref": "PushCreateGroupToSQSLambdaFunction"
          },
          "PushUpdateGroupToSQSLambdaFunctionParameter": {
            "Ref": "PushUpdateGroupToSQSLambdaFunction"
          },
          "PushDeleteGroupToSQSLambdaFunctionParameter": {
            "Ref": "PushDeleteGroupToSQSLambdaFunction"
          },
          "RecoveryLambdaFunctionParameter": {
            "Ref": "RecoveryLambdaFunction"
          },
          "MediatorLambdaFunctionParameter": {
            "Ref": "MediatorLambdaFunction"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.eu-central-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/serverless-user-management/dev/1563542839710-2019-07-19T13:27:19.710Z",
              "cloudformation-template-Versions-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "LoginLambdaFunction",
        "CommandCreateUserLambdaFunction",
        "CommandUpdateUserLambdaFunction",
        "CommandDeleteUserLambdaFunction",
        "CreateUserLambdaFunction",
        "UpdateUserLambdaFunction",
        "DeleteUserLambdaFunction",
        "ReadUserLambdaFunction",
        "PushCreateUserToSQSLambdaFunction",
        "PushUpdateUserToSQSLambdaFunction",
        "PushDeleteUserToSQSLambdaFunction",
        "CommandCreateRoleLambdaFunction",
        "CommandUpdateRoleLambdaFunction",
        "CommandDeleteRoleLambdaFunction",
        "CreateRoleLambdaFunction",
        "UpdateRoleLambdaFunction",
        "DeleteRoleLambdaFunction",
        "ReadRoleLambdaFunction",
        "GetAllRolesLambdaFunction",
        "PushCreateRoleToSQSLambdaFunction",
        "PushUpdateRoleToSQSLambdaFunction",
        "PushDeleteRoleToSQSLambdaFunction",
        "CommandCreateAuthLambdaFunction",
        "CommandUpdateAuthLambdaFunction",
        "CommandDeleteAuthLambdaFunction",
        "CreateAuthLambdaFunction",
        "UpdateAuthLambdaFunction",
        "DeleteAuthLambdaFunction",
        "ReadAuthLambdaFunction",
        "GetAllAuthsLambdaFunction",
        "PushCreateAuthToSQSLambdaFunction",
        "PushUpdateAuthToSQSLambdaFunction",
        "PushDeleteAuthToSQSLambdaFunction",
        "CommandCreateGroupLambdaFunction",
        "CommandUpdateGroupLambdaFunction",
        "CommandDeleteGroupLambdaFunction",
        "CreateGroupLambdaFunction",
        "UpdateGroupLambdaFunction",
        "DeleteGroupLambdaFunction",
        "ReadGroupLambdaFunction",
        "GetAllGroupsLambdaFunction",
        "PushCreateGroupToSQSLambdaFunction",
        "PushUpdateGroupToSQSLambdaFunction",
        "PushDeleteGroupToSQSLambdaFunction",
        "RecoveryLambdaFunction",
        "MediatorLambdaFunction"
      ]
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.LoginLambdaVersionZXBLtreIq5c8d2kD96LRd407QNzzax2onBDqeci9jc"
        ]
      }
    },
    "CommandCreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandCreateUserLambdaVersionpOSAaiY4XVWjpOR7lOyJ81MA83dMrWpcngS9zhrk"
        ]
      }
    },
    "CommandUpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandUpdateUserLambdaVersionosziWaIbSwa3MZdGf8acv3Z5q1C4JBnUyqdh86K6uo"
        ]
      }
    },
    "CommandDeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandDeleteUserLambdaVersionUTkAuSP05hEoB1ayPiYfgqceMNhsUIcCzfDGCUKkmqc"
        ]
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CreateUserLambdaVersion8gIqnBZIr6Pfh5xhAUNUDohHjyJgHUEVRA8Yjkgs5EM"
        ]
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.UpdateUserLambdaVersionfBJCjsCPYrxBPA1bWFwXwZEXAFSbgOwQiNZNvKJwYY"
        ]
      }
    },
    "DeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.DeleteUserLambdaVersionKB4ZAwVjHtfUAKdhdokajGXex7cw1XaasZ7XQ8tY"
        ]
      }
    },
    "ReadUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.ReadUserLambdaVersionalCga2eo8ABJtcF8h0lmmn39AZJyherm4pYENInILE"
        ]
      }
    },
    "PushCreateUserToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushCreateUserToSQSLambdaVersionsQ7CBujzXTcG1ml6KX3w2x130we5uwRtqivR2wm8Q"
        ]
      }
    },
    "PushUpdateUserToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushUpdateUserToSQSLambdaVersiont0XGXTMqW7XMWZdwQqArJCVbDKaLlxh3XXmMq8bONw"
        ]
      }
    },
    "PushDeleteUserToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushDeleteUserToSQSLambdaVersionMT5atqkOntd9ZdiRnuo5ujc3Lyt123cJQH7Bt4Zmhx4"
        ]
      }
    },
    "CommandCreateRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandCreateRoleLambdaVersiontkExHlGhryO5nehulPw4uypU6ALy6cesl5Fsz2DV6Q"
        ]
      }
    },
    "CommandUpdateRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandUpdateRoleLambdaVersionLYgGq0rm1W4aSjofUE6DfvbHcUBAP16Ya5rWY732HbE"
        ]
      }
    },
    "CommandDeleteRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandDeleteRoleLambdaVersionSshF21YQgTpCPVKrc4oEY6mwWuAkRmMry2XbjYADw"
        ]
      }
    },
    "CreateRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CreateRoleLambdaVersioniGHvxMJURLEAr4x5U6QEeTArxY3aWUWpDr8CgO4H0"
        ]
      }
    },
    "UpdateRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.UpdateRoleLambdaVersionkL6G9iMVcUBmp7R6cIEXNvfG1Bp4MkbsqkM4KtIInvE"
        ]
      }
    },
    "DeleteRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.DeleteRoleLambdaVersionO32dIlEunQ26ssXNaADU6AcWOzPuEKhRBdychxdU"
        ]
      }
    },
    "ReadRoleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.ReadRoleLambdaVersionNWRXr1oZb3FefRSOXymJjdIETahp8JwFykkO5Z5Pg"
        ]
      }
    },
    "GetAllRolesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.GetAllRolesLambdaVersionHxM1NMiknBvanPOelizya1YryUi5RmWtSNo5RM2kNU"
        ]
      }
    },
    "PushCreateRoleToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushCreateRoleToSQSLambdaVersionY4CoJDHyNotgQRGAE4idQZPyiwoh65KVl7XFTG2lSg"
        ]
      }
    },
    "PushUpdateRoleToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushUpdateRoleToSQSLambdaVersionmFhujsGo3znkzhOvY4IRaufYdUftUbzos9lC9G0ng"
        ]
      }
    },
    "PushDeleteRoleToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushDeleteRoleToSQSLambdaVersionX7iojkjsoVtpqOJ50oPESVdj8uoTTyrjADqW4rwzYg"
        ]
      }
    },
    "CommandCreateAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandCreateAuthLambdaVersionDAAVhhDYvk9tFcfWiEgEjX4h7PMZcoyRCEAJRIwRE"
        ]
      }
    },
    "CommandUpdateAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandUpdateAuthLambdaVersioncEO6wPNPRtN56uQn0XvfyRlzmV8ecjm96VDLhpu8k"
        ]
      }
    },
    "CommandDeleteAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandDeleteAuthLambdaVersioncQdy7pzYKmwqhDdVnguoguEKqp9bhFPVLjPTeFcIOC4"
        ]
      }
    },
    "CreateAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CreateAuthLambdaVersion9vVrdt83cbKmxQutqGcbdFnhH1eIqYhEM8p1qMGg"
        ]
      }
    },
    "UpdateAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.UpdateAuthLambdaVersionmrK2rwxVK011SLSiPGeQhJBYr5iapah7IpnxLloB4"
        ]
      }
    },
    "DeleteAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.DeleteAuthLambdaVersion7N8FDvJTwn5JVdMfoLaa7OQuaMQLoz4kitCxFtwkSYQ"
        ]
      }
    },
    "ReadAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.ReadAuthLambdaVersionIKfpIDH9n5zmhPH7szkOye8QGHg7YOO4M5R0RUOI9c"
        ]
      }
    },
    "GetAllAuthsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.GetAllAuthsLambdaVersionHK3ueUp2D9WDsGC6eemdoa7A3TgURz737fDAldAl8"
        ]
      }
    },
    "PushCreateAuthToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushCreateAuthToSQSLambdaVersionbSCtxtN72nDXiJH8tnoqCXeEF9pGhcxhDPI5lAgKjRQ"
        ]
      }
    },
    "PushUpdateAuthToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushUpdateAuthToSQSLambdaVersionEnnvpVDB3ZPZsXHpMf3G0X4rMmijc54C2YHv5Es8"
        ]
      }
    },
    "PushDeleteAuthToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushDeleteAuthToSQSLambdaVersionjl7FlM3pVQwKQfOjz76ihWtpbkbwyQkVC3J5bfelM"
        ]
      }
    },
    "CommandCreateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandCreateGroupLambdaVersionX575HhBcNZxbhMIVFmTWkCVII8hfmPkK5AC3GMw4"
        ]
      }
    },
    "CommandUpdateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandUpdateGroupLambdaVersionxi9m9npfDRpedY6eFjmKjHAAFvjrCxmDsNVwwNXoKk"
        ]
      }
    },
    "CommandDeleteGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CommandDeleteGroupLambdaVersion7Hmcb4yVOtw5ZNunr1fRRrdabljL9ZAKqqqr0R8g"
        ]
      }
    },
    "CreateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.CreateGroupLambdaVersionvP42ldY13FLBy6HIX21JEjGBj2WqJTndvcbNVQchy8"
        ]
      }
    },
    "UpdateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.UpdateGroupLambdaVersionOVA8ght3lQCq0G3JwXk6JjuJ0TeXLaxd09kuldbow"
        ]
      }
    },
    "DeleteGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.DeleteGroupLambdaVersionMWzgh0oYSRUuX6CoDg1kx3TmiJJuZrxiLba8EWBdro"
        ]
      }
    },
    "ReadGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.ReadGroupLambdaVersion13HyoapgzX3W7lqAGt0ICEX1eKAynVD1VuJmDMY6mT4"
        ]
      }
    },
    "GetAllGroupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.GetAllGroupsLambdaVersiondsLbKjgyjwEMX74aOS5oYv4Zlw7EyWPJNzG1pG9A"
        ]
      }
    },
    "PushCreateGroupToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushCreateGroupToSQSLambdaVersion5GNh5ZAgzRYtPymsYfh3eJnwMHIccPcJjCEj5G4A"
        ]
      }
    },
    "PushUpdateGroupToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushUpdateGroupToSQSLambdaVersionF3nI8JEvSEZ4jQ66daIlzoBKyxy67JRSz1qNcxsNo"
        ]
      }
    },
    "PushDeleteGroupToSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.PushDeleteGroupToSQSLambdaVersionH78TbEjhcyUng79CTmJqIGxyb9qxPqgLA35rMwf2BQ"
        ]
      }
    },
    "RecoveryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.RecoveryLambdaVersionAAXKBzXzsttHhaoSprkIzG8fNnyh3YnjueLW0Xk0"
        ]
      }
    },
    "MediatorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.MediatorLambdaVersionJm1nVxWg3AVj3S6KhVdRnXD0o9mmP2rKTyXSummojU"
        ]
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}