service: serverless-user-management

plugins:
 # - serverless-finch  #plugin to create html app

custom:
  client:
    bucketName: serverless-bucket-s3-public
    indexDocument: index.html
    errorDocument: error.html

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "dynamodb:*"
        - "sqs:*"
        - "lambda:*"
        - "cloudwatch:*"
        - "apigateway:*"

resources:
  Resources:
    #USER TABLE
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: user

    #ROLE TABLE
    RolesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: roleId
            AttributeType: S
        KeySchema:
          - AttributeName: roleId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: role

    #AUTHORIZATION TABLE
    AuthorizationsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: authId
            AttributeType: S
        KeySchema:
          - AttributeName: authId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: auth

    #GROUP TABLE
    GroupsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: group

    #EVENT STORE TABLE
    EventStoreDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification: 
          StreamViewType: NEW_IMAGE
        TableName: eventStore

      

functions:
  # ------------------------------- USER FUNCTIONS ------------------------------- #
  commandUser:
    handler: handler.commandUser
    events:
      - sqs:
          arn: arn:aws:sqs:eu-central-1:582373673306:userQueue #set ARN of an existing queue

  mediatorUser:
    handler: handler.mediatorUser

  updateUser:
    handler: handler.updateUser

  createUser:
    handler: handler.createUser

  deleteUser: 
    handler: handler.deleteUser

  readUser: 
    handler: handler.readUser
    events: 
      - http: 
          path: /readUser
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "userId": "$input.params("userId")" }'

  pushEventUserToSQS: 
    handler: handler.pushEventUserToSQS 
    events: 
      - http:
          path: /pusheventusertosqs
          method: post
          cors: true
          integration: lambda

  # ------------------------------- ROLE FUNCTIONS ------------------------------- #

  commandRole:
    handler: handler.commandRole
    events:
      - sqs:
          arn: arn:aws:sqs:eu-central-1:582373673306:roleQueue #create new queue and set the ARN

  mediatorRole:
    handler: handler.mediatorRole

  updateRole:
    handler: handler.updateRole

  createRole:
    handler: handler.createRole

  deleteRole: 
    handler: handler.deleteRole

  deleteAllRoles: 
    handler: handler.deleteAllRoles

  readRole: 
    handler: handler.readRole
    events: 
      - http: 
          path: /readRole
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "roleId": "$input.params("roleId")" }'
  
  getAllRoles: 
    handler: handler.getAllRoles
    events: 
      - http: 
          path: /getAllRoles
          method: get
          cors: true
          integration: lambda

  pushEventRoleToSQS: 
    handler: handler.pushEventRoleToSQS 
    events: 
      - http:
          path: /pusheventroletosqs
          method: post
          cors: true
          integration: lambda

  # ------------------------------- AUTHORIZATION FUNCTIONS ------------------------------- #

  commandAuth:
    handler: handler.commandAuth
    events:
      - sqs:
          arn: arn:aws:sqs:eu-central-1:582373673306:authQueue #create new queue and set the ARN

  mediatorAuth:
    handler: handler.mediatorAuth

  updateAuth:
    handler: handler.updateAuth

  createAuth:
    handler: handler.createAuth

  deleteAuth: 
    handler: handler.deleteAuth

  readAuth: 
    handler: handler.readAuth
    events: 
      - http: 
          path: /readAuth
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "authId": "$input.params("authId")" }'
    
  getAllAuths: 
    handler: handler.getAllAuths
    events: 
      - http: 
          path: /getAllAuths
          method: get
          cors: true
          integration: lambda

  pushEventAuthToSQS: 
    handler: handler.pushEventAuthToSQS 
    events: 
      - http:
          path: /pusheventauthtosqs
          method: post
          cors: true
          integration: lambda

  # ------------------------------- GROUP FUNCTIONS ------------------------------- #

  commandGroup:
    handler: handler.commandGroup
    events:
      - sqs:
          arn: arn:aws:sqs:eu-central-1:582373673306:groupQueue #create new queue and set the ARN

  mediatorGroup:
    handler: handler.mediatorGroup

  updateGroup:
    handler: handler.updateGroup

  createGroup:
    handler: handler.createGroup

  deleteGroup: 
    handler: handler.deleteGroup

  readGroup: 
    handler: handler.readGroup
    events: 
      - http: 
          path: /readGroup
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "groupId": "$input.params("groupId")" }'

  getAllGroups: 
    handler: handler.getAllGroups
    events: 
      - http: 
          path: /getAllGroups
          method: get
          cors: true
          integration: lambda

  pushEventGroupToSQS: 
    handler: handler.pushEventGroupToSQS 
    events: 
      - http:
          path: /pusheventgrouptosqs
          method: post
          cors: true
          integration: lambda

# ------------------------------- EVENT SOURCING FUNCTIONS ------------------------------- #

  recovery: 
    handler: handler.recovery
    timeout: 10
    events: 
      - http:
          path: /mediatorrecovery
          method: post
          cors: true
          integration: lambda

  mediator:
    handler: handler.mediator
    events:
        - stream: arn:aws:dynamodb:eu-central-1:582373673306:table/eventStore/stream/2019-07-10T08:02:22.059 #set the ARN of dynamodb stream

  clearDB:
    handler: handler.clearDB
    
    

